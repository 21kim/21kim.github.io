{"version":3,"sources":["LoginPage/LoginPage.js","components/CommonHeader.jsx","MainPage/MainPage.jsx","SignupPage/SignupPage.jsx","NotFoundPage/NotFoundPage.jsx","App.js","serviceWorker.js","index.js"],"names":["layout","labelCol","span","wrapperCol","tailLayout","offset","LoginForm","props","name","initialValues","remember","onFinish","values","console","log","history","push","onFinishFailed","errorInfo","Item","label","rules","required","message","Password","valuePropName","type","htmlType","to","WithRouterLoginPage","withRouter","CommonHeader","Layout","Header","context","router","Content","MainPage","Footer","className","formItemLayout","Select","Option","AutoComplete","xs","sm","tailFormItemLayout","RegistrationForm","Form","useForm","form","useState","autoCompleteResult","map","website","value","residence","prefix","scrollToFirstError","hasFeedback","dependencies","getFieldValue","validator","rule","Promise","reject","resolve","title","QuestionCircleOutlined","whitespace","style","width","_","href","SignupPage","NotFoundPage","button","status","subTitle","extra","createBrowserHistory","App","exact","path","component","LoginPage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.949ae480.chunk.js","sourcesContent":["import React from 'react'\nimport { Link, withRouter } from 'react-router-dom'\nimport {\n  Layout,\n  Form, \n  Input, \n  Button, \n  Checkbox, \n} from 'antd'\n\nconst layout = {\n  labelCol: { span: 8 },\n  wrapperCol: { span: 16 },\n};\nconst tailLayout = {\n  wrapperCol: { offset: 8, span: 16 },\n};\n\nconst LoginForm = (props) => {\n  const onFinish = values => {\n    console.log('Success:', values);\n    props.history.push('/home')\n  };\n\n  const onFinishFailed = errorInfo => {\n    console.log('Failed:', errorInfo);\n  };\n\n  return (\n    <Form\n      {...layout}\n      name=\"basic\"\n      initialValues={{ remember: true }}\n      onFinish={onFinish}\n      onFinishFailed={onFinishFailed}\n    >\n      <Form.Item\n        label=\"Username\"\n        name=\"username\"\n        rules={[{ required: true, message: 'Please input your username!' }]}\n      >\n        <Input />\n      </Form.Item>\n\n      <Form.Item\n        label=\"Password\"\n        name=\"password\"\n        rules={[{ required: true, message: 'Please input your password!' }]}\n      >\n        <Input.Password />\n      </Form.Item>\n\n      <Form.Item {...tailLayout} name=\"remember\" valuePropName=\"checked\">\n        <Checkbox>Remember me</Checkbox>\n      </Form.Item>\n\n      <Form.Item {...tailLayout}>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Login\n        </Button>\n        <Link to=\"/signup\">\n          <Button type=\"primary\">\n            Sign Up\n          </Button>\n        </Link>\n      </Form.Item>\n    </Form>\n  );\n};\n\nconst LoginPage = (props) => {\n  return (\n    <Layout>\n      <LoginForm {...props}/>\n    </Layout>\n  )\n}\n\nconst WithRouterLoginPage = withRouter(LoginPage)\n\nexport { WithRouterLoginPage as LoginPage }\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport { \n  Layout,\n  Menu,\n} from 'antd'\n\nconst { Header } = Layout\n\nconst CommonHeader = (props, context) => {\n  const { router } = context\n  \n  return (\n    <h1>Hello world!</h1>\n  )\n}\n\nexport { CommonHeader }\n","import React from 'react';\nimport { Layout } from 'antd';\nimport { CommonHeader } from '../components'\n\nconst { Header, Content, Footer } = Layout;\n\nconst MainPage = () => {\n  return (\n    <Layout className=\"App\">\n      <Header>\n        <CommonHeader />\n      </Header>\n      <Content />\n    </Layout>\n  )\n}\n\nexport { MainPage };\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom'\nimport {\n  Layout,\n  Form,\n  Input,\n  Tooltip,\n  Cascader,\n  Select,\n  Row,\n  Col,\n  Checkbox,\n  Button,\n  AutoComplete,\n} from 'antd';\nimport { QuestionCircleOutlined } from '@ant-design/icons';\n\nconst { Option } = Select;\nconst AutoCompleteOption = AutoComplete.Option;\n\nconst formItemLayout = {\n  labelCol: {\n    xs: { span: 24 },\n    sm: { span: 8 },\n  },\n  wrapperCol: {\n    xs: { span: 24 },\n    sm: { span: 16 },\n  },\n};\nconst tailFormItemLayout = {\n  wrapperCol: {\n    xs: {\n      span: 24,\n      offset: 0,\n    },\n    sm: {\n      span: 16,\n      offset: 8,\n    },\n  },\n};\n\nconst RegistrationForm = () => {\n  const [form] = Form.useForm();\n\n  const onFinish = values => {\n    console.log('Received values of form: ', values);\n  };\n\n  const [autoCompleteResult, setAutoCompleteResult] = useState([]);\n\n  const onWebsiteChange = value => {\n    if (!value) {\n      setAutoCompleteResult([]);\n    } else {\n      setAutoCompleteResult(['.com', '.org', '.net'].map(domain => `${value}${domain}`));\n    }\n  };\n\n  const websiteOptions = autoCompleteResult.map(website => ({\n    label: website,\n    value: website,\n  }));\n\n  return (\n    <Form\n      {...formItemLayout}\n      form={form}\n      name=\"register\"\n      onFinish={onFinish}\n      initialValues={{\n        residence: ['zhejiang', 'hangzhou', 'xihu'],\n        prefix: '86',\n      }}\n      scrollToFirstError\n    >\n      <Form.Item\n        name=\"email\"\n        label=\"E-mail\"\n        rules={[\n          {\n            type: 'email',\n            message: 'The input is not valid E-mail!',\n          },\n          {\n            required: true,\n            message: 'Please input your E-mail!',\n          },\n        ]}\n      >\n        <Input />\n      </Form.Item>\n\n      <Form.Item\n        name=\"password\"\n        label=\"Password\"\n        rules={[\n          {\n            required: true,\n            message: 'Please input your password!',\n          },\n        ]}\n        hasFeedback\n      >\n        <Input.Password />\n      </Form.Item>\n\n      <Form.Item\n        name=\"confirm\"\n        label=\"Confirm Password\"\n        dependencies={['password']}\n        hasFeedback\n        rules={[\n          {\n            required: true,\n            message: 'Please confirm your password!',\n          },\n          ({ getFieldValue }) => ({\n            validator(rule, value) {\n              if (!value || getFieldValue('password') === value) {\n                return Promise.resolve();\n              }\n              return Promise.reject('The two passwords that you entered do not match!');\n            },\n          }),\n        ]}\n      >\n        <Input.Password />\n      </Form.Item>\n\n      <Form.Item\n        name=\"nickname\"\n        label={\n          <span>\n            Nickname&nbsp;\n            <Tooltip title=\"What do you want others to call you?\">\n              <QuestionCircleOutlined />\n            </Tooltip>\n          </span>\n        }\n        rules={[{ required: true, message: 'Please input your nickname!', whitespace: true }]}\n      >\n        <Input />\n      </Form.Item>\n\n      <Form.Item\n        name=\"residence\"\n        label=\"Habitual Residence\"\n        rules={[\n          { type: 'array', required: true, message: 'Please select your habitual residence!' },\n        ]}\n      >\n        <Input />\n      </Form.Item>\n\n      <Form.Item\n        name=\"phone\"\n        label=\"Phone Number\"\n        rules={[{ required: true, message: 'Please input your phone number!' }]}\n      >\n        <Input style={{ width: '100%' }} />\n      </Form.Item>\n\n      <Form.Item\n        name=\"agreement\"\n        valuePropName=\"checked\"\n        rules={[\n          { validator:(_, value) => value ? Promise.resolve() : Promise.reject('Should accept agreement') },\n        ]}\n        {...tailFormItemLayout}\n      >\n        <Checkbox>\n          I have read the <a href=\"\">agreement</a>\n        </Checkbox>\n      </Form.Item>\n      <Form.Item {...tailFormItemLayout}>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Register\n        </Button>\n        <Link to=\"/\">\n          <Button>\n            Back\n          </Button>\n        </Link>\n      </Form.Item>\n    </Form>\n  );\n};\n\n\nconst SignupPage = () => {\n  return (\n\t\t<Layout>\n\t  \t<RegistrationForm />\n\t\t</Layout>\n\t)\n}\n\nexport { SignupPage };\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport { Result, Button } from 'antd'\n\nconst NotFoundPage = () => {\n  const button = (\n    <Link to=\"/\">\n      <Button type=\"primary\">\n        Back home\n      </Button>\n    </Link>\n  )\n  return (\n    <Result \n      status=\"404\"\n      title=\"Not Found\"\n      subTitle=\"Sorry, the page you visited does not exist.\"\n      extra={button}\n    />\n  )\n}\n\nexport { NotFoundPage } \n","import React from 'react'\nimport { BrowserRouter, Router, Route, Switch } from 'react-router-dom'\nimport { createBrowserHistory } from 'history'\n\nimport './App.css'\nimport { LoginPage } from './LoginPage'\nimport { MainPage } from './MainPage'\nimport { SignupPage } from './SignupPage'\nimport { NotFoundPage } from './NotFoundPage'\n\nconst history = createBrowserHistory()\n\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <Router history={history}>\n        <Switch>\n          <Route exact path=\"/\" component={LoginPage} />\n          <Route exact path=\"/signup\" component={SignupPage} />\n          <Route exact path=\"/home\" component={MainPage} />\n          <Route component={NotFoundPage} />\n        </Switch>\n      </Router>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}